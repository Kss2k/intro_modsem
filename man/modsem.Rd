% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modsem2.2.R
\name{modsem}
\alias{modsem}
\title{Interaction between latent variables}
\usage{
modsem(
  modelSyntax = NULL,
  data = NULL,
  method = "rca",
  standardizeData = FALSE,
  centerData = FALSE,
  firstLoadingFixed = TRUE,
  centerBefore = NULL,
  centerAfter = NULL,
  residualsProds = NULL,
  residualCovSyntax = NULL,
  constrainedProdMean = NULL,
  constrainedLoadings = NULL,
  constrainedVar = NULL,
  constrainedResCovMethod = NULL,
  qml = FALSE,
  auto.scale = "none",
  auto.center = "none",
  ...
)
}
\arguments{
\item{modelSyntax}{lavaan syntax}

\item{data}{dataframe}

\item{method}{method to use:
"rca" = residual centering approach (passed to lavaan),
"uca" = unconstrained approach (passed to lavaan),
"dblcent" = double centering approach (passed to lavaan),
"pind" = prod ind approach (passed to lavaan),
"lms" = laten model structural equations (passed to nlsem),
"custom" = use parameters specified in the function call (passed to lavaan)}

\item{standardizeData}{should data be scaled before fitting model}

\item{firstLoadingFixed}{Sould the first factorloading in the latent prod be fixed to one?}

\item{centerBefore}{should inds in prods be centered before computing prods (overwritten by method, if method != NULL)}

\item{centerAfter}{should ind prods be centered after they have been computed?}

\item{residualsProds}{should ind prods be centered using residuals (overwritten by method, if method != NULL)}

\item{residualCovSyntax}{should syntax for residual covariances be produced (overwritten by method, if method != NULL)}

\item{constrainedProdMean}{should syntax prod mean be produced (overwritten by method, if method != NULL)}

\item{...}{arguments passed to other functions, e.g,. lavaan}

\item{isMeasureSpecified}{have you specified the measure model for the latent prod}
}
\description{
Interaction between latent variables
}
\examples{
library(modsem)
m1 <- '
  # Outer Model
  X =~ x1 + x2 +x3
  Y =~ y1 + y2 + y3
  Z =~ z1 + z2 + z3

  # Inner model
  Y ~ X + Z + X:Z
'
est1 <- modsem(m1, oneInt)
summary(est1)
}
