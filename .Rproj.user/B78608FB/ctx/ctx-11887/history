# Names to the left of =~
expressionIndicators <- rightAndLeft[[2]]
# Remove +, this may not be general enough
indicators <- stringr::str_split(expressionIndicators, "\\+|[:alnum:]+\\*|[:blank:]")
indicators
}
latentModelRca2 <- modsem(m2, df2, method = "rca")
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/readingLaavan.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/buildModelSpecification.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/rca.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/shared.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/unrestricted.R", echo=TRUE)
latentModelRca2 <- modsem(m2, df2, method = "rca")
readModsem(m2)
latentModelRca2 <- modsem(m2, df2, method = "rca")
createModelSpecification <- function(modelSyntax, data, method = "rca", returnLavaan = FALSE,
...) {
modelSpecification <- list(
originalSyntax = modelSyntax,
# I might not need these:, since createRelationDf contains the same info
#productCombos = createProductCombos(modelSyntax),
#indicatorProductNames = createIndicatorNames(modelSyntax),
indicatorNames = getIndividualIndicators(modelSyntax),
# This is a combination of the two above:
# I definetely need a shorter word for this
relationDf = createRelationDf(modelSyntax),
data = data
)
# setting class to method used
class(modelSpecification) <- method
# computing the productindicators based on class/method
modelSpecification$productIndicators <- createProductIndicators(modelSpecification)
# combining the product indicators into a single dataframe (i.e., not a list of dataframes)
# Using unname() avoids getting names like df1.var1, ... df2.var1 etc.. but assumes unique names
print(modelSpecification$productIndicators)
combinedProductIndicators <- purrr::list_cbind(unname(modelSpecification$productIndicators))
# combining the product indicators with the dataset, into one coherent one
modelSpecification$modifiedData <- cbind(data, combinedProductIndicators)
# Generating new syntax based on method
modelSpecification$modifiedSyntax <- generateSyntax(modelSpecification)
if (returnLavaan == TRUE) {
return(lavaan::sem(modelSpecification$modifiedSyntax,
modelSpecification$modifiedData))
}
modelSpecification$lavaan <- lavaan::sem(modelSpecification$modifiedSyntax,
modelSpecification$modifiedData, ...)
# returning object
modelSpecification
}
latentModelRca2 <- modsem(m2, df2, method = "rca")
readModsem(m2)
readModsem <- function(modelSyntax, method = "rca", generateSyntax = TRUE) {
modelSpecification <- list(
originalSyntax = modelSyntax,
indicatorNames = getIndividualIndicators(modelSyntax),
relationDf = createRelationDf(modelSyntax)
)
class(modelSpecification) <- method
if (generateSyntax == FALSE) {
return(modelSpecification)
}
modelSpecification$modifiedSyntax <- generateSyntax(modelSpecification)
modelSpecification
}
readModsem(m2, generateSyntax = FALSE)
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z + G:H
'
realModel2 <- lm(Y ~ realX*realZ + realG*realH, df2)
summary(realModel2)
latentModelRca2 <- modsem(m2, df2, method = "rca")
readModsem(m2, generateSyntax = FALSE)
lavaan::summary(latentModelRca$lavaan)
latentModelRca2 <- modsem(m2, df2, method = "rca")
lavaan::summary(latentModelRca$lavaan)
createModelSpecification <- function(modelSyntax, data, method = "rca", returnLavaan = FALSE,
...) {
modelSpecification <- list(
originalSyntax = modelSyntax,
# I might not need these:, since createRelationDf contains the same info
#productCombos = createProductCombos(modelSyntax),
#indicatorProductNames = createIndicatorNames(modelSyntax),
indicatorNames = getIndividualIndicators(modelSyntax),
# This is a combination of the two above:
# I definetely need a shorter word for this
relationDf = createRelationDf(modelSyntax),
data = data
)
# setting class to method used
class(modelSpecification) <- method
# computing the productindicators based on class/method
modelSpecification$productIndicators <- createProductIndicators(modelSpecification)
# combining the product indicators into a single dataframe (i.e., not a list of dataframes)
# Using unname() avoids getting names like df1.var1, ... df2.var1 etc.. but assumes unique names
combinedProductIndicators <- purrr::list_cbind(unname(modelSpecification$productIndicators))
# combining the product indicators with the dataset, into one coherent one
modelSpecification$modifiedData <- cbind(data, combinedProductIndicators)
# Generating new syntax based on method
modelSpecification$modifiedSyntax <- generateSyntax(modelSpecification)
if (returnLavaan == TRUE) {
return(lavaan::sem(modelSpecification$modifiedSyntax,
modelSpecification$modifiedData))
}
modelSpecification$lavaan <- lavaan::sem(modelSpecification$modifiedSyntax,
modelSpecification$modifiedData, ...)
# returning object
modelSpecification
}
latentModelRca2 <- modsem(m2, df2, method = "rca")
lavaan::summary(latentModelRca$lavaan)
lavaan::summary(latentModelRca2$lavaan)
latentModelUncent2 <- modsem(m2, df2, method = "unrestricted")
lavaan::summary(latentModelUncent2$lavaan)
Y <- rnorm(1000, 1, 10)
y1 <- addRandomVariance(Y, 0.5)
y2 <- addRandomVariance(Y, 0.6)
y3 <- addRandomVariance(Y, 0.4)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data/simulating3.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data/simulating3.R", echo=TRUE)
library(lavaan)
library(modsem)
setwd("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data")
df1 <- readRDS("exampleData1.rds")
df2 <- readRDS("exampleData4.rds")
df3 <- readRDS("exampleData3.rds")
s3 <- '
# Outer Model
Attitude =~ ATTD1 + ATTD2 + ATTD4 + ATTD4
PBC =~ PBC1 + PBC2 + PBC3 + PBC4
Behaviour =~ PB1 + PB2 + PB3 + PB4
SN =~ SN1 + SN2 + SN3 + SN4
TestY =~ ty1 + ty2
TestX =~ tx1 + tx2
Hello =~ H1 + H2
# Higher order
Intention =~ PBC + SN + Attitude
# Inner model
Behaviour ~ Intention + PBC + TestY :TestX + Intention:PBC:Hello
'
readS3 <- readModsem(s3)
cat(readS3$modifiedSyntax)
library(modsem)
library(modsem)
library(lavaan)
library(modsem)
setwd("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data")
df1 <- readRDS("exampleData1.rds")
df2 <- readRDS("exampleData4.rds")
df3 <- readRDS("exampleData3.rds")
s1 <- '
# outer Model
Attitude =~ ATTD1 + ATTD2 + ATTD4 + ATTD4
PBC =~ PBC1 + PBC2 + PBC3 + PBC4
Behaviour =~ PB1 + PB2 + PB3 + PB4
SN =~ SN1 + SN2 + SN3 + SN4
pestY =~ ty1 + ty2
TestX =~ tx1 + tx2
# Higher order
Intention =~ PBC + SN + Attitude
# Inner model
Behaviour ~ Intention + PBC + Intention:PBC + pestY :TestX
Behaviour ~ Intention + PBC + pestY :TestX
'
readS1 <- readModsem(s1)
cat(readS1$modifiedSyntax)
s2 <- '
# Outer Model
Attitude =~ ATTD1 + ATTD2 + ATTD4 + ATTD4
PBC =~ PBC1 + PBC2 + PBC3 + PBC4
Behaviour =~ PB1 + PB2 + PB3 + PB4
SN =~ SN1 + SN2 + SN3 + SN4
TestY =~ ty1 + ty2
TestX =~ tx1 + tx2
# Higher order
Intention =~ PBC + SN + Attitude
# Inner model
Behaviour ~ Intention + PBC + TestY :TestX + Intention:PBC
'
readS2 <- readModsem(s2)
cat(readS2$modifiedSyntax)
s3 <- '
# Outer Model
Attitude =~ ATTD1 + ATTD2 + ATTD4 + ATTD4
PBC =~ PBC1 + PBC2 + PBC3 + PBC4
Behaviour =~ PB1 + PB2 + PB3 + PB4
SN =~ SN1 + SN2 + SN3 + SN4
TestY =~ ty1 + ty2
TestX =~ tx1 + tx2
Hello =~ H1 + H2
# Higher order
Intention =~ PBC + SN + Attitude
# Inner model
Behaviour ~ Intention + PBC + TestY :TestX + Intention:PBC:Hello
'
readS3 <- readModsem(s3)
cat(readS3$modifiedSyntax)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
# Inner model
Y ~ X + Z + X:Z
'
realModel <- lm(Y ~ realX*realZ, df1)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
# Inner model
Y ~ X + Z + X:Z
'
realModel <- lm(realY ~ realX*realZ, df1)
latentModelRca <- modsem(m1, df1, method = "rca")
lavaan::summary(latentModelRca$lavaan)
summary(realModel)
latentModelRca <- modsem(m1, df1, method = "rca")
lavaan::summary(latentModelRca$lavaan)
latentModelUncent <- modsem(m1, df1, method = "unrestricted")
lavaan::summary(latentModelUncent$lavaan)
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z + G:H
'
realModel2 <- lm(Y ~ realX*realZ + realG*realH, df2)
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z + G:H
'
realModel2 <- lm(realY ~ realX*realZ + realG*realH, df2)
summary(realModel2)
latentModelRca2 <- modsem(m2, df2, method = "rca")
lavaan::summary(latentModelRca2$lavaan)
latentModelUncent2 <- modsem(m2, df2, method = "unrestricted")
lavaan::summary(latentModelUncent2$lavaan)
YnoError <- 1.5*X + 1*Z
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data/simulating3.R", echo=TRUE)
library(lavaan)
library(modsem)
setwd("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data")
df1 <- readRDS("exampleData1.rds")
df2 <- readRDS("exampleData4.rds")
df3 <- readRDS("exampleData3.rds")
realModel2 <- lm(realY ~ realX*realZ + realG*realH, df2)
m3 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
# Inner model
Y ~ X + Z + X:Z
'
realModel <- lm(realY ~ realX*realZ, df3)
summary(realModel)
latentModelRca3 <- modsem(m3, df3, method = "rca")
lavaan::summary(latentModelRca3$lavaan)
latentModelRca3 <- modsem(m3, df3, method = "rca")
lavaan::summary(latentModelRca3$lavaan)
latentModelUncent <- modsem(m3, df3, method = "unrestricted")
lavaan::summary(latentModelUncent$lavaan)
m2 <- '
latentModelRca2 <- modsem(m2, df2, method = "rca")
lavaan::summary(latentModelRca2$lavaan)
latentModelRca2 <- modsem(m2, df2, method = "rca")
lavaan::summary(latentModelRca2$lavaan)
m2 <- '
latentModelRca2 <- modsem(m2, df2, method = "rca")
lavaan::summary(latentModelRca2$lavaan)
latentModelRca2 <- modsem(m2, df2, method = "rca")
lavaan::summary(latentModelRca2$lavaan)
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G + G:H
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
readModsem(m2)
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/shared.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/unrestricted.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/rca.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/buildModelSpecification.R", echo=TRUE)
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
multiplyIndicators <- function(df) {
print(head(df))
if (is.null(df)) return(NULL)
if (ncol(df) <= 1) return(df)
product <- df[[1]] * df[[2]]
y <- cbind(product, df[,-(1:2),drop = FALSE])
multiplyIndicators(y)$product
}
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
multiplyIndicators <- function(df) {
print(head(df))
if (is.null(df)) return(NULL)
if (ncol(df) <= 1) return(df)
product <- df[[1]] * df[[2]]
y <- cbind(product, df[,-(1:2),drop = FALSE])
print(typeof(df))
multiplyIndicators(y)$product
}
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
multiplyIndicators <- function(df) {
print(head(df))
print(typeof(df))
print(is.data.frame(df))
if (is.null(df)) return(NULL)
if (ncol(df) <= 1) return(df)
product <- df[[1]] * df[[2]]
y <- cbind(product, df[,-(1:2),drop = FALSE])
multiplyIndicators(y)$product
}
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
multiplyIndicators <- function(df) {
print(head(df))
print(typeof(df))
print(is.data.frame(df))
if (is.null(df)) return(NULL)
if (ncol(df) <= 1) return(df)
product <- df[[1]] * df[[2]]
y <- cbind(product, df[,-(1:2),drop = FALSE])
multiplyIndicators(y)
}
multiplyIndicators(cars)
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
multiplyIndicators <- function(df) {
if (is.null(df)) return(NULL)
if (ncol(df) <= 1) return(df)
product <- df[[1]] * df[[2]]
y <- cbind(product, df[,-(1:2),drop = FALSE])
multiplyIndicators(y)
}
# function for calculating residuals of a single productIndicator
calculateResidualsSingle <- function(dependentName, independentNames, data) {
formula <- generateFormula(dependentName, independentNames, operator = "~")
print(formula)
# This doesnt look pretty, but allows me to keep the names when passing back to
# model specification
out <- lm(formula, data) |>
residuals() |>
as.data.frame()
# Naming the variable
colnames(out) <- dependentName
# returning
out
}
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
latentModelRca <- modsem(m1, df1, method = "rca")
multiplyIndicators <- function(df) {
if (is.null(df)) return(NULL)
if (ncol(df) <= 1) return(df)
product <- df[[1]] * df[[2]]
y <- cbind(product, df[,-(1:2),drop = FALSE])
unlist(multiplyIndicators(y))
}
# function for calculating residuals of a single productIndicator
calculateResidualsSingle <- function(dependentName, independentNames, data) {
formula <- generateFormula(dependentName, independentNames, operator = "~")
# This doesnt look pretty, but allows me to keep the names when passing back to
# model specification
out <- lm(formula, data) |>
residuals() |>
as.data.frame()
# Naming the variable
colnames(out) <- dependentName
# returning
out
}
latentModelRca <- modsem(m1, df1, method = "rca")
lavaan::summary(latentModelRca$lavaan)
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
readModsem(m2)
lavaan::summary(latentModelRca2$lavaan)
latentModelRca2 <- modsem(m2, df2, method = "rca")
m2 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
G =~ g1 + g2 + g3
H =~ h1 + h2 + h3
# Inner model
Y ~ X + Z + G + H + X:Z:G
'
latentModelRca2 <- modsem(m2, df2, method = "rca")
lavaan::summary(latentModelRca2$lavaan)
multiplyIndicators <- function(df) {
if (is.null(df)) return(NULL)
if (ncol(df) <= 1) return(df)
product <- df[[1]] * df[[2]]
y <- cbind(product, df[,-(1:2),drop = FALSE])
# old solution: multiplyIndicators(y)$product
unlist(multiplyIndicators(y))
}
# function for calculating residuals of a single productIndicator
calculateResidualsSingle <- function(dependentName, independentNames, data) {
formula <- generateFormula(dependentName, independentNames, operator = "~")
# This doesnt look pretty, but allows me to keep the names when passing back to
# model specification
out <- lm(formula, data) |>
residuals() |>
as.data.frame()
# Naming the variable
colnames(out) <- dependentName
# returning
out
}
