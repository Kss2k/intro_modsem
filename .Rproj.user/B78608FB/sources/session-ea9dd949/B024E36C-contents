
# Random syntaxes

example1 <- '

  # outer Model
  Attitude =~ ATTD1 + ATTD2 + ATTD4 + ATTD4
  PBC =~ PBC1 + PBC2 + PBC3 + PBC4
  Behaviour =~ PB1 + PB2 + PB3 + PB4
  SN =~ SN1 + SN2 + SN3 + SN4
  pestY =~ ty1 + ty2
  TestX =~ tx1 + tx2

  # Higher order
  Intention =~ PBC + SN + Attitude

  # Inner model
  Behaviour ~ Intention + PBC + Intention:PBC + pestY :TestX
  Behaviour ~ Intention + PBC + pestY :TestX


'

example2 <- '

  # Outer Model
  Attitude =~ ATTD1 + ATTD2 + ATTD4 + ATTD4
  PBC =~ PBC1 + PBC2 + PBC3 + PBC4
  Behaviour =~ PB1 + PB2 + PB3 + PB4
  SN =~ SN1 + SN2 + SN3 + SN4
  TestY =~ ty1 + ty2
  TestX =~ tx1 + tx2

  # Higher order
  Intention =~ PBC + SN + Attitude

  # Inner model
  Behaviour ~ Intention + PBC + TestY :TestX + Intention:PBC



'

example3 <- '

  # Outer Model
  Attitude =~ ATTD1 + ATTD2 + ATTD4 + ATTD4
  PBC =~ PBC1 + PBC2 + PBC3 + PBC4
  Behaviour =~ PB1 + PB2 + PB3 + PB4
  SN =~ SN1 + SN2 + SN3 + SN4
  TestY =~ ty1 + ty2
  TestX =~ tx1 + tx2
  Hello =~ H1 + H2
  # Higher order
  Intention =~ PBC + SN + Attitude

  # Inner model
  Behaviour ~ Intention + PBC + TestY :TestX + Intention:PBC:Hello



'

# Testing the whole thing used a generated dataset ####

testModel <- '
  # Outer Model
  X =~ x1 + x2 +x3
  Y =~ y1 + y2 + y3
  Z =~ z1 + z2 + z3

  # Inner model
  Y ~ X + Z + X:Z
'

testModel2 <- '
  # Outer Model
  X =~ x1 + x2
  Y =~ y1 + y2
  Z =~ z1 + z2 + z3
  G =~ y3 +x3 +z3
  GX =~ g1x1
  # Inner model
  Y ~ X + Z + X:Z + G:X + G:x1 + x1:x2
  GX ~ CovGX*1
  G ~~ CovGX*X
'
noMod <- '
  # Outer Model
  X =~ x1 + x2
  Y =~ y1 + y2
  Z =~ z1 + z2
  G =~ y3 +x3 +z3
  # Inner model
  Y ~ X + Z + G
'
# Creating the data
addRandomVariance <- function(x, proportion) {
  x + rnorm(length(x), 0, sd(x))*proportion
}

# TEst data1

# Latent Variable X
X <- runif(1000, 1, 10)
x1 <- addRandomVariance(X, 0.7)
x2 <- addRandomVariance(X, 0.8)
x3 <- addRandomVariance(X, 0.4)

# Latent Variable Z
Z <- runif(1000, 1, 10)
z1 <- addRandomVariance(Z, 0.4)
z2 <- addRandomVariance(Z, 0.6)
z3 <- addRandomVariance(Z, 0.5)

# Latent Variable Y = X + Z + X:Z

YnoError <- 0.3*X + 0.4*Z + 0.2*Z*X
#scaledY <- scale(YnoError)*10 + 5
Y <- addRandomVariance(YnoError, 0.7)
y1 <- addRandomVariance(Y, 0.5)
y2 <- addRandomVariance(Y, 0.6)
y3 <- addRandomVariance(Y, 0.4)

testData <- data.frame(realY = Y,
                       realX = X,
                       realZ = Z,
                       x1 = x1,
                       x2 = x2,
                       x3 = x3,
                       y1 = y1,
                       y2 = y2,
                       y3 = y3,
                       z1 = z1,
                       z2 = z2,
                       z3 = z3)
saveRDS(testData, "exampleData1.rds")
#### Model 1 ####

testModel <- '
  # Outer Model
  X =~ x1 + x2 +x3
  Y =~ y1 + y2 + y3
  Z =~ z1 + z2 + z3

  # Inner model
  Y ~ X + Z + X:Z

  # Covariances
  x1 ~~ x2
  x1 ~~ 0*x3
  z1 ~~ z2
'


realModel <- lm(Y ~ realX*realZ, testData)
latentModel <- modsem(testModel, testData)
lavaan::summary(latentModel$lavaan)


#### Model 2: small version of model 1 ####

# Manual calculation
manualData <- testData
manualData$x1z1 <- manualData$x1*manualData$z1
manualData$x1z2 <- manualData$x1*manualData$z2
manualData$x2z1 <- manualData$x2*manualData$z1
manualData$x2z2 <- manualData$x2*manualData$z2


manualData$res_x1z1 <- lm(x1z1 ~ x1+ z1+ x2 + z2, data = manualData)$residuals
manualData$res_x1z2 <- lm(x1z2 ~ x1+ z1+ x2 + z2, data = manualData)$residuals
manualData$res_x2z1 <- lm(x2z1 ~ x1+ z1+ x2 + z2, data = manualData)$residuals
manualData$res_x2z2 <- lm(x2z2 ~ x1+ z1+ x2 + z2, data = manualData)$residuals


manualSyntax <- '
# Structural Model
  X =~ x1 + x2
  Y =~ y1 + y2
  Z =~ z1 + z2

  # Inner model
  Y ~ X + Z + XZ

  # ModSEM: Structural Model
  XZ =~ res_x1z1 + res_x2z1 + res_x1z2 + res_x2z2


  # ModSEM: Residual (Co)Variances
  res_x2z1 ~~ res_x1z1
  res_x1z2 ~~ res_x1z1
  res_x2z2 ~~ 0*res_x1z1
  res_x1z2 ~~ 0*res_x2z1
  res_x2z2 ~~ res_x2z1
  res_x2z2 ~~ res_x1z2
'

manualModel <- lavaan::sem(manualSyntax, manualData)
summary(manualModel)


#### Using modsem ####

testModel2 <- '
  # Outer Model
  X =~ x1 + x2
  Y =~ y1 + y2
  Z =~ z1 + z2

  # Inner model
  Y ~ X + Z + X:Z
'
# RCA
latentModel2rca <- modsem(testModel2, testData, meanstructure = TRUE)
lavaan::summary(latentModel2rca$lavaan)

# unrestricted
latentModel2 <- modsem(testModel2, testData, method = "unrestricted")
lavaan::summary(latentModel2$lavaan)

