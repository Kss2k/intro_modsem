OldproductIndicators <- function(productNames, pairDf, data) {
  indicatorProducts <- as.data.frame(matrix(nrow = nrow(data),
                                            ncol = length(productNames)
  )
  )

  colnames(indicatorProducts) <- productNames

  for (i in seq_along(productNames)) {
    indicators <- data[pairDf[[i]]]
    indicatorProducts[[productNames[[i]]]] <- indicators[[1]] * indicators[[2]]
  }
  indicatorProducts
}


shareValuesMatrix <- function(df) {
  # check if vectors in dataframe share atleast one value to each other
  # return lower triangle of the matrix

  relationalMatrix <- matrix(ncol = ncol(df), nrow = ncol(df))
  variables <- colnames(df)
  print(variables)
  outer(variables, variables, shareValuesLogical2, df)
}

shareValuesLogical <- function(nameX, nameY, data) {
  sharedValuesLogical <- data[[nameX]] %in% data[[nameY]]
  if (sum(sharedValuesLogical) >= 1) {
    TRUE
  } else if (sum(sharedValuesLogical) <= 0) {
    FALSE
  }
}


replaceLogical <- function(relationalMatrix) {
  out <- matrix(NA_character_, ncol = ncol(relationalMatrix),
                nrow = nrow(relationalMatrix))
  colNames <- colnames(relationalMatrix)
  rowNames <- rownames(relationalMatrix)
  for (i in 1:ncol(relationalMatrix)) {
    for (j in 1:nrow(relationalMatrix)) {
      if (relationalMatrix[i,j] == TRUE) {
        out[i,j] <- paste0(colNames[i], " ~~ ", rowNames[j])
      }
      else if (relationalMatrix[i,j] == FALSE) {
        out[i,j] <- paste0(colNames[i], " ~~ " , "0*",rowNames[j])
      }
    }
  }
  unique(as.vector(out))
}



createIndicatorProducts <- function(relationDf, data, centered = FALSE) {
  # Getting the indicatorProduct names
  varnames <- colnames(relationDf)

  # Getting a dataframe with all the indiactors and their values
  # attributes()$indicatorNames contains the names of all the indicators used
  # in the relational data frame (relationDf)
  indicatorNames <- attributes(relationDf)$indicatorNames

  indicators <- data[indicatorNames]

  # Centering them, if center == TRUE
  if (centered == TRUE) {
    indicators <- apply(indicators, 2, scale, scale = FALSE) |>
      as.data.frame()
  }



  # jUST FOR TESTING
  print(apply(indicators, 2, mean))



  # Creating a dataframe to hold the computed indicatorproducts
  products <- data.frame(matrix(ncol = length(varnames), nrow = nrow(data)))
  # Setting the productames (e.g., var1var2 = var1*var2) and indicator names
  products <- structure(products,
                        indicatorNames = indicatorNames)
  colnames(products) <- varnames

  # Loop to create the indicatorProducts
  for (i in seq_along(varnames)) {
    varname <- varnames[[i]]

    products[[varname]] <- multiplyIndicators(indicators[relationDf[[varname]]])
  }

  products
}
