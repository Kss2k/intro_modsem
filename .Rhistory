Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "regression", doubleCentering = FALSE)
summary(latentModelRca)
summary(latentModelRca[["productIndicators"]][["XZ"]])
latentModelUnc <- modsem(m1, df1, method = "unconstrained")
summary(latentModelUnc)
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE)
summary(latentModelUnc)
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE)
summary(latentModelUnc)
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE,
residualCovSyntax = TRUE)
summary(latentModelUnc)
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = FALSE,
doubleCentering = TRUE,
residualCovSyntax = TRUE)
summary(latentModelUnc)
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE,
residualCovSyntax = TRUE)
summary(latentModelUnc)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE,
residualCovSyntax = TRUE)
summary(latentModelUnc)
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE,
residualCovSyntax = TRUE,
firstLoadingFixed = FALSE)
summary(latentModelUnc)
cat(latentModelUnc$newSyntax)
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE,
residualCovSyntax = TRUE,
firstLoadingFixed = TRUE)
summary(latentModelUnc)
cat(latentModelUnc$newSyntax)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE,
residualCovSyntax = TRUE,
firstLoadingFixed = TRUE)
summary(latentModelUnc)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
#X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelUnc <- modsem(m1, df1, method = NULL,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE,
residualCovSyntax = TRUE,
firstLoadingFixed = TRUE)
summary(latentModelUnc)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelUnc <- modsem(m1, df1, method = NULL,
isMeasurementSpecified = TRUE,
centeredProducts = TRUE,
residualsProducts = TRUE,
doubleCentering = TRUE,
residualCovSyntax = TRUE,
firstLoadingFixed = TRUE)
summary(latentModelUnc)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelUnc <- modsem(m1, df1, method = "unconstrained",
isMeasurementSpecified = TRUE)
summary(latentModelUnc)
latentModelUnc <- modsem(m1, df1, method = "unconstrained",
isMeasurementSpecified = TRUE)
latentModelUnc <- modsem(m1, df1, method = "unconstrained",
isMeasurementSpecified = TRUE)
latentModelUnc <- modsem(m1, df1, method = "unconstrained", isMeasurementSpecified = TRUE)
latentModelUnc <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
latentModelUnc$productIndicators
latentModelUnc$productIndicators -> test
View(test)
combineListDf(test)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelUnc <- modsem(m1, df1, method = "unconstrained",
isMeasurementSpecified = TRUE)
summary(latentModelUnc)
latentModelUnc <- modsem(m1, df1, method = "rca")
is.numeric(iris)
is.numeric(iris[1:4])
apply(is.numeric(iris))
apply(iris, 2is.numeric)
apply(iris, 2, is.numeric)
str(iris)
apply(iris, 2, is.real)
apply(iris, 2, is.double)
help("is.numeric")
typeof(iris[["1"]])
typeof(iris[[1]])
is.numeric(iris[[1]])
purrr::map(iris, is.numeric())
purrr::map(iris, is.numeric)
purrr::map_lgl(iris, is.numeric)
sapply(iris, is.numeric)
multiplyIndicators <- function(df) {
if (is.null(df)) {
return(NULL)
}
if (ncol(df) <= 1){
return(df)
}
product <- df[[1]] * df[[2]]
y <- cbind(product, df[,-(1:2),drop = FALSE])
unlist(multiplyIndicators(y))
}
runif(10e6)
runif(10e6) -> testVec
10e6
1e6
runif(1e2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
head(testDf)
source("~/.active-rstudio-document", echo=TRUE)
head(testDf)
source("~/.active-rstudio-document", echo=TRUE)
View(testDf)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
nCol <- 10
nRow <- 10e3
testDf <- vector("list", length = nCol)
for (i in 1:10)  {
testDf[[i]] <- runif(nRow)
}
list2DF(testDf)
source("~/.active-rstudio-document", echo=TRUE)
testDf
source("~/.active-rstudio-document", echo=TRUE)
testDf
multiplyIndicators(testDf)
multiplyIndicators(testDf) -> rTest
multiplyRecursiveCpp(testDf) -> rTest
Rcpp::sourceCpp("R/multiplyIndicators.cpp")
multiplyRecursiveCpp(testDf) -> cppTest
cppTest == rTest
View(rTest[1:10, ])
View(rTest[1:10])
View(testDf[1:10,])
Rcpp::sourceCpp("R/multiplyIndicators.cpp")
Rcpp::sourceCpp("R/multiplyIndicators.cpp")
multiplyIndicatorsCpp(iris)
multiplyIndicatorsCpp(iris[1:4])
iris
multiplyIndicatorsCpp(iris[1:5])
multiplyIndicatorsCpp(mtcars)
mtcars
sapply(testDf, is.numeric)
list(1:10, 1:10, 20:11)
structure(list(1:10, 1:10, 20:11), class = "data.frame")
structure(list(1:10, 1:10, 20:11), class = "data.frame", row.names = 1:10)
structure(list(1:10, 1:10, 20:11), class = "data.frame", row.names = NULL)
help(vapply)
vappy(iris, is.numeric, "logical")
vapply(iris, is.numeric, "logical")
vapply(iris, is.numeric, vector("logical"))
vapply(iris, is.numeric, vector("logical", 1))
vapply(testDf, is.numeric, vector("logical", 1))
sapply(testDf, is.numeric)
apply(testDf, 2, scale, scale = FALSE) |>
as.data.frame()
lapplyDf(testDf, scale, scale = FALSE)
#  Wrapper of lapply for dataframes
lapplyDf <- function(df, FUN, ...) {
structure(lapply(df, FUN, ...),
names = names(df),
row.names = 1:nrow(df),
class = "data.frame")
}
lapplyDf(testDf, scale, scale = FALSE)
library(lavaan)
library(modsem)
setwd("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data")
df1 <- readRDS("exampleData1.rds")
df2 <- readRDS("exampleData4.rds")
df3 <- readRDS("exampleData3.rds")
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
# Inner model
Y ~ X + Z + X:Z
'
realModel <- lm(realY ~ realX*realZ, df1)
summary(realModel)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
library(lavaan)
library(modsem)
setwd("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data")
df1 <- readRDS("exampleData1.rds")
df2 <- readRDS("exampleData4.rds")
df3 <- readRDS("exampleData3.rds")
library(lavaan)
library(modsem)
setwd("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data")
df1 <- readRDS("exampleData1.rds")
df2 <- readRDS("exampleData4.rds")
df3 <- readRDS("exampleData3.rds")
library(lavaan)
library(modsem)
setwd("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data")
df1 <- readRDS("exampleData1.rds")
df2 <- readRDS("exampleData4.rds")
df3 <- readRDS("exampleData3.rds")
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
# Inner model
Y ~ X + Z + X:Z
'
realModel <- lm(realY ~ realX*realZ, df1)
summary(realModel)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/utils.R", echo=TRUE)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
library(lavaan)
library(modsem)
setwd("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/data")
df1 <- readRDS("exampleData1.rds")
df2 <- readRDS("exampleData4.rds")
df3 <- readRDS("exampleData3.rds")
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
# Inner model
Y ~ X + Z + X:Z
'
realModel <- lm(realY ~ realX*realZ, df1)
summary(realModel)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/utils.R", echo=TRUE)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
summary(latentModelRca)
multiplyIndicators <- function(df) {
if (is.null(df)) {
return(NULL)
}
if (ncol(df) <= 1){
return(df)
}
y <- cbind.data.frame(df[[1]] * df[[2]], df[,-(1:2),drop = FALSE])
unlist(multiplyIndicators(y))
}
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
summary(latentModelRca)
multiplyIndicators(iris)
multiplyIndicators(iris[1:4])
help("cbind.data.frame")
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
multiplyIndicators(iris[1:4])
purrr::list_cbind(1:10, 1:10)
multiplyIndicators <- function(df) {
if (is.null(df)) {
return(NULL)
}
if (ncol(df) <= 1){
return(df)
}
y <- cbind.data.frame(df[[1]] * df[[2]],
df[,-(1:2),drop = FALSE],
deparse.level = 0)
multiplyIndicators(y)
}
multiplyIndicators(iris[1:4])
multiplyIndicators <- function(df) {
if (is.null(df)) {
return(NULL)
}
if (ncol(df) <= 1){
return(df)
}
y <- cbind.data.frame(df[[1]] * df[[2]],
df[,-(1:2),drop = FALSE],
deparse.level = 0)
multiplyIndicators(y)[[1]]
}
multiplyIndicators(iris[1:4])
multiplyIndicators <- function(df) {
if (is.null(df)) {
return(NULL)
}
if (ncol(df) <= 1){
return(df)
}
y <- cbind.data.frame(df[[1]] * df[[2]],
df[,-(1:2),drop = FALSE],
deparse.level = 0)
as.vector(multiplyIndicators(y))
}
multiplyIndicators(iris[1:4])
multiplyIndicators <- function(df) {
if (is.null(df)) {
return(NULL)
}
if (ncol(df) <= 1){
return(df[,1])
}
y <- cbind.data.frame(df[[1]] * df[[2]],
df[,-(1:2),drop = FALSE],
deparse.level = 0)
multiplyIndicators(y)
}
multiplyIndicators(iris[1:4])
multiplyIndicators <- function(df) {
if (is.null(df)) {
return(NULL)
}
if (ncol(df) <= 1){
return(df[[1]])
}
y <- cbind.data.frame(df[[1]] * df[[2]],
df[,-(1:2),drop = FALSE],
deparse.level = 0)
multiplyIndicators(y)
}
multiplyIndicators(iris[1:4])
multiplyIndicators <- function(df) {
if (is.null(df)) {
return(NULL)
}
if (ncol(df) <= 1){
return(df[[1]])
}
y <- cbind.data.frame(df[[1]] * df[[2]],
df[,-(1:2),drop = FALSE])
multiplyIndicators(y)
}
multiplyIndicators(iris[1:4])
multiplyIndicators(testDf)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
summary(latentModelRca)
source("C:/Users/slupp/OneDrive/Skrivebord/MasterOppgaveMehmet/modsem/R/modsem2.1.R", echo=TRUE)
m1 <- '
# Outer Model
X =~ x1 + x2 +x3
Y =~ y1 + y2 + y3
Z =~ z1 + z2 + z3
X:Z =~ x1:z1 + x2:z2
# Inner model
Y ~ X + Z + X:Z
'
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
summary(latentModelRca)
latentModelRca <- modsem(m1, df1, method = "rca", isMeasurementSpecified = TRUE)
latentModelRca <- modsem(m1, df1, method = "rca")
